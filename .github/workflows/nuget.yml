name: publish to nuget
on:
  push:
    branches:
      - releases/** # Default release branch
jobs:
  publish:
    name: build, pack & publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Extract version from branch name
        id: extract_version
        run: echo "VERSION=$(echo $GITHUB_REF_NAME | sed 's/releases\///')" >> $GITHUB_OUTPUT

      # Then use the output in your publish step
      - name: publish Core to Nuget
        id: publish_nuget
        uses: rohith/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: iPDFGen.Core/iPDFGen.Core.csproj

          # NuGet package id, used for version detection & defaults to project name
          PACKAGE_NAME: iPDFGen.Core

          # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
          VERSION_FILE_PATH: Directory.Build.props

          # Regex pattern to extract version info in a capturing group
#          VERSION_REGEX: ^\s*<Version>(.*)<\/Version>\s*$

          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          VERSION_STATIC: ${{ steps.extract_version.outputs.VERSION }}

          # Flag to toggle git tagging, enabled by default
          # TAG_COMMIT: true

          # Format of the git tag, [*] gets replaced with actual version
          # TAG_FORMAT: v*

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          NUGET_SOURCE: https://api.nuget.org

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          # INCLUDE_SYMBOLS: false